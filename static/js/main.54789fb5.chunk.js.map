{"version":3,"sources":["store/ModalContext.js","store/ContactContext.js","components/NewMessageForm/NewContactForm.js","components/ContactsList/ContactsList.js","serviceWorker.js","index.js"],"names":["ModalContext","React","createContext","setModalShow","ModalProvider","Provider","Consumer","ContactContext","ContactProvider","NewContactForm","_useState","useState","_useState2","Object","slicedToArray","name","setName","_useState3","_useState4","phone","setPhone","_useState5","_useState6","company","setComapny","_useState7","_useState8","givewayParticipant","setGivewayParticipant","setShowModal","useContext","_useContext2","contactsList","setContactsList","addContactsToList","addedContact","contactsArray","push","_handleSubmit2","asyncToGenerator","regenerator_default","a","mark","_callee","e","newItem","contact","message","wrap","_context","prev","next","preventDefault","Axios","post","sent","window","encodeURIComponent","data","giveawayNumber","open","concat","replace","stop","apply","this","arguments","react_default","createElement","Fragment","className","onClick","xmlns","width","height","viewBox","d","fill","onSubmit","_x","htmlFor","react_input_mask_default","type","mask","id","onChange","target","value","defaultChecked","checked","ContactsList","showModal","useEffect","_ref","contacts","get","componentDidMount","length","map","key","_id","substr","NewMessageForm_NewContactForm","Boolean","location","hostname","match","ReactDOM","render","components_ContactsList_ContactsList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54789fb5.chunk.js","sourcesContent":["import React from 'react';\n\nconst ModalContext = React.createContext({\n  setModalShow: () => {},\n});\n\nexport const ModalProvider = ModalContext.Provider;\nexport const ModalConsumer = ModalContext.Consumer;\nexport default ModalContext;","import React from 'react';\n\nconst ContactContext = React.createContext();\n\nexport const ContactProvider = ContactContext.Provider;\nexport const ContactConsumer = ContactContext.Consumer;\nexport default ContactContext;","import React, { useState, useContext } from 'react';\r\nimport InputMask from 'react-input-mask';\r\nimport Axios from 'axios';\r\nimport ModalContext from '../../store/ModalContext';\r\nimport ContactContext from '../../store/ContactContext';\r\nimport './NewContactForm.css';\r\n\r\nfunction NewContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [company, setComapny] = useState('');\r\n  const [givewayParticipant, setGivewayParticipant] = useState(true);\r\n  const { setShowModal } = useContext(ModalContext);\r\n  const { contactsList, setContactsList } = useContext(ContactContext);\r\n\r\n  function addContactsToList(addedContact) {\r\n    const contactsArray = contactsList;\r\n    \r\n    contactsArray.push(addedContact);\r\n    \r\n    setContactsList(contactsArray);\r\n  }\r\n\r\n  async function _handleSubmit(e) {\r\n    const newItem = { name, phone, company, givewayParticipant };\r\n    let contact = {};\r\n    let message = '';\r\n\r\n    e.preventDefault();\r\n\r\n    contact = await Axios.post('http://localhost:3100/api/v1/contact', newItem);\r\n    \r\n    message = window.encodeURIComponent(\r\n      'Olá ' + contact.data.name + ',\\n\\n' +\r\n      'Agradecemos a sua visita em nosso Stand, foi um prazer recebê-lo!\\n' +\r\n      (givewayParticipant ? 'O seu número para participar do sorteio é: ' + contact.data.giveawayNumber + '. Boa Sorte!\\n' : '') + \r\n      'E conforme conversamos, segue o material sobre os Apps e soluções da iv2. Qualquer dúvida , estamos á disposição :)' +\r\n      '\\n\\nAbraço,\\nGrupo iv2'\r\n    );\r\n\r\n    window.open(`https://api.whatsapp.com/send?phone=55${phone.replace(/[(,),\\-, ]/g, '')}&text=${message}`, '_blank');\r\n\r\n    addContactsToList(contact.data);\r\n    setShowModal(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <div className=\"close\" onClick={() => setShowModal(false)}>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n            <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\r\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n          </svg>\r\n        </div>\r\n        Nova mensagem\r\n      </div>\r\n\r\n      <form onSubmit={_handleSubmit}>\r\n        <div className=\"form-inputs\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"phone\">Telefone</label>\r\n            <InputMask type=\"text\" mask=\"(99) 9 9999-9999\" id=\"phone\" name=\"phone\" onChange={e => setPhone(e.target.value)} className=\"form-control\" />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">Nome</label>\r\n            <input value={name} type=\"text\" id=\"name\" name=\"name\" onChange={e => setName(e.target.value)} className=\"form-control\" />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"company\">Empresa</label>\r\n            <input value={company} type=\"text\" id=\"company\" name=\"company\" onChange={e => setComapny(e.target.value)} className=\"form-control\" />\r\n          </div>\r\n\r\n          <div className=\"form-group form-check\">\r\n            <label htmlFor=\"giveaway\" className=\"checkbox\">\r\n              <input type=\"checkbox\" name=\"giveway\" id=\"giveaway\" defaultChecked=\"true\" onChange={e => setGivewayParticipant(e.target.checked) } />\r\n              Quer participar do sorteio\r\n            </label>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"button-container\">\r\n          <input type=\"submit\" value=\"Enviar\" />\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NewContactForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport NewMessageForm from '../NewMessageForm/NewContactForm';\r\nimport { ModalProvider } from '../../store/ModalContext';\r\nimport { ContactProvider } from '../../store/ContactContext';\r\nimport './ContactsList.css';\r\n\r\nfunction ContactsList() {\r\n  const [contactsList, setContactsList] = useState([]);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const componentDidMount = async () => {\r\n      const contacts = await Axios.get('http://localhost:3100/api/v1/contact');\r\n      setContactsList(contacts.data);\r\n    }\r\n    \r\n    componentDidMount();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        Contatos ({contactsList.length})\r\n      </div>\r\n\r\n      <div className=\"contact-list\">\r\n        {\r\n          contactsList.map(contact => {\r\n            return (\r\n              <div className=\"contact-list-item\" key={contact._id}>\r\n                <div>\r\n                  <div className=\"contact-inital\">\r\n                    {\r\n                      contact.name.substr(0, 1)\r\n                    }\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"contact-info-container\">\r\n                  {contact.name}\r\n                  <div className=\"info\">{contact.company}</div>\r\n                  <div className=\"info phone\">{contact.phone}</div>\r\n                </div>\r\n                \r\n                {\r\n                  contact.givewayParticipant &&\r\n                  <div className=\"giveaway-number-container\">\r\n                    n° {contact.giveawayNumber}\r\n                  </div>\r\n                }\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n\r\n      <button type=\"button\" className=\"fab\" onClick={() => setShowModal('show')}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n          <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill=\"#fff\"/>\r\n          <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n        </svg>\r\n      </button>\r\n\r\n      <ModalProvider value={{ setShowModal }}>\r\n        <div id=\"modalContainer\" onClick={e => e.target.id === 'modalContainer' && setShowModal(false)} className={'modal-container' + (showModal ? ' visible' : '')}>\r\n          <div className={'form-modal' + (showModal ? ' visible' : '')}>\r\n            <ContactProvider value={{ contactsList, setContactsList }}>\r\n              <NewMessageForm />\r\n            </ContactProvider>\r\n          </div>\r\n        </div>\r\n      </ModalProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContactsList;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/ContactsList/ContactsList';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}